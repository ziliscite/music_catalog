// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_test.go -package=membership
//

// Package membership is a generated GoMock package.
package membership

import (
	"database/sql"
	"github.com/stretchr/testify/assert"
	_ "gorm.io/gorm"
	"music_catalog/internal/config"
	_ "music_catalog/internal/config"
	membership "music_catalog/internal/models/membership"
	reflect "reflect"
	"testing"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(user *membership.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), user)
}

// GetByEmail mocks base method.
func (m *MockRepository) GetByEmail(email string) (*membership.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*membership.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockRepositoryMockRecorder) GetByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockRepository)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(id uint) (*membership.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*membership.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), id)
}

// GetByUsername mocks base method.
func (m *MockRepository) GetByUsername(username string) (*membership.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", username)
	ret0, _ := ret[0].(*membership.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockRepositoryMockRecorder) GetByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockRepository)(nil).GetByUsername), username)
}

func TestService_SignUp(t *testing.T) {
	ctrMock := gomock.NewController(t) // create controller
	defer ctrMock.Finish()

	mockRepository := NewMockRepository(ctrMock) // the generated mock repo

	type args struct {
		request membership.SignUpRequest
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
		mockFn  func(args args)
	}{
		{
			name: "success",
			args: args{
				request: membership.SignUpRequest{
					Email:    "test@gmail.com",
					Username: "testusername",
					Password: "password",
				},
			},
			wantErr: false,
			mockFn: func(args args) {
				mockRepository.EXPECT().GetByEmail(args.request.Email).Return(nil, sql.ErrNoRows)
				mockRepository.EXPECT().GetByUsername(args.request.Username).Return(nil, sql.ErrNoRows)
				mockRepository.EXPECT().Create(gomock.Any()).Return(nil)
			},
		},
		{
			name: "failed when GetByEmail",
			args: args{
				request: membership.SignUpRequest{
					Email:    "test@gmail.com",
					Username: "testusername",
					Password: "password",
				},
			},
			wantErr: true,
			mockFn: func(args args) {
				mockRepository.EXPECT().GetByEmail(args.request.Email).Return(nil, assert.AnError)
				mockRepository.EXPECT().GetByUsername(args.request.Username).Return(nil, sql.ErrNoRows)
			},
		},
		{
			name: "failed when GetByUsername",
			args: args{
				request: membership.SignUpRequest{
					Email:    "test@gmail.com",
					Username: "testusername",
					Password: "password",
				},
			},
			wantErr: true,
			mockFn: func(args args) {
				mockRepository.EXPECT().GetByEmail(args.request.Email).Return(nil, sql.ErrNoRows)
				mockRepository.EXPECT().GetByUsername(args.request.Username).Return(nil, assert.AnError)
			},
		},
		{
			name: "failed when CreateUser",
			args: args{
				request: membership.SignUpRequest{
					Email:    "test@gmail.com",
					Username: "testusername",
					Password: "password",
				},
			},
			wantErr: true,
			mockFn: func(args args) {
				mockRepository.EXPECT().GetByEmail(args.request.Email).Return(nil, sql.ErrNoRows)
				mockRepository.EXPECT().GetByUsername(args.request.Username).Return(nil, sql.ErrNoRows)
				mockRepository.EXPECT().Create(gomock.Any()).Return(assert.AnError)
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.mockFn(tt.args)
			s := &Service{
				cfg: &config.Config{},
				r: mockRepository,
			}
			if err := s.SignUp(tt.args.request); (err != nil) != tt.wantErr {
				t.Errorf("SignUp() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
